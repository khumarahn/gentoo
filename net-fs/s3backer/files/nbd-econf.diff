diff --git a/CHANGES b/CHANGES
index 05a7203..7bdad14 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,3 +1,9 @@
+Version Next
+
+    - Implement nbdkit "block_size" callback
+    - Added configure flag "--enable-nbd" (issue #223)
+    - Fix spurious "cache file is truncated" error (issue #222)
+
 Version 2.1.2 released April 23, 2024
 
     - Automatically recreate nbdkit socket's directory if missing (issue #219)
diff --git a/Makefile.am b/Makefile.am
index 8d369ac..db111c9 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -56,7 +56,6 @@ noinst_HEADERS=		s3backer.h \
 			s3b_config.h
 
 # Setup build for NBD plugin shared library (if NBDKit is available)
-s3bnbddir=		$(S3B_NBD_DIR)
 if NBDKIT_FOUND
 
 nbdplugindir=		$(NBDKIT_PLUGINDIR)
@@ -85,11 +84,6 @@ nbdkit_s3backer_plugin_la_SOURCES = \
 nbdkit_s3backer_plugin_la_LDFLAGS = \
 			-module -avoid-version -shared
 
-# Create an empty, root-only directory for UNIX socket files
-install-data-hook:
-			$(MKDIR_P) $(DESTDIR)$(s3bnbddir)
-			chmod 0700 $(DESTDIR)$(s3bnbddir)
-
 endif
 
 # See https://www.gnu.org/software/automake/manual/html_node/Objects-created-both-with-libtool-and-without.html
diff --git a/configure.ac b/configure.ac
index da57540..b46fa07 100644
--- a/configure.ac
+++ b/configure.ac
@@ -77,38 +77,42 @@ PKG_CHECK_MODULES([ZSTD], libzstd,
     LDFLAGS="${LDFLAGS} ${ZSTD_LIBS}"],
     [true])
 
-# Check for NBDKit
-PKG_CHECK_MODULES([NBDKIT], [nbdkit >= 1.24.1],
-    [AC_DEFINE([NBDKIT], [1], [Whether NBDKit is available])
-    NBDKIT_FOUND=true],
-    [NBDKIT_FOUND=false])
-AC_SUBST([NBDKIT_FOUND])
+# Check if NBD support is enabled
+AS_IF([test "x$enable_nbd" != xno], [
+
+    # Check for NBDKit
+    PKG_CHECK_MODULES([NBDKIT], [nbdkit >= 1.24.1],
+        [AC_DEFINE([NBDKIT], [1], [Whether NBDKit is available])
+        NBDKIT_FOUND=true],
+        [NBDKIT_FOUND=false])
+
+    # If NBDKit was found, find the plugin directory and executable
+    AS_IF([test "x$NBDKIT_FOUND" = xtrue], [
+
+        # Find nbdkit plugins directory
+        AC_MSG_CHECKING([NBDKit plugins directory])
+        PKG_CHECK_VAR([NBDKIT_PLUGINDIR], [nbdkit], [plugindir])
+        AS_IF([test "x$NBDKIT_PLUGINDIR" = "x"],
+            [AC_MSG_FAILURE([Unable to identify the NBDKit plugin directory.])],
+            [AC_MSG_RESULT([$NBDKIT_PLUGINDIR])])
+
+        # Find nbdkit(1)
+        AC_PATH_PROGS([NBDKIT_EXECUTABLE], [nbdkit])
+        AS_IF([test "x$NBDKIT_EXECUTABLE" = x], [AC_MSG_ERROR([required executable nbdkit not found])])
+        AC_DEFINE_UNQUOTED([NBDKIT_EXECUTABLE], ["$NBDKIT_EXECUTABLE"], [path to nbdkit(1) executable])
+
+        # Find nbd-client(8)
+        AC_PATH_PROGS([NBD_CLIENT_EXECUTABLE], [nbd-client])
+        AS_IF([test "x$NBD_CLIENT_EXECUTABLE" = x], [AC_MSG_ERROR([required executable nbd-client not found])])
+        AC_DEFINE_UNQUOTED([NBD_CLIENT_EXECUTABLE], ["$NBD_CLIENT_EXECUTABLE"], [path to nbd-client(8) executable])
+
+        # Find modprobe(8) (optional)
+        AC_PATH_PROGS([MODPROBE_EXECUTABLE], [modprobe])
+        AC_DEFINE_UNQUOTED([MODPROBE_EXECUTABLE], ["$MODPROBE_EXECUTABLE"], [path to modprobe(8) executable])
+    ])
+], [NBDKIT_FOUND=false])
 AM_CONDITIONAL([NBDKIT_FOUND], [test "x$NBDKIT_FOUND" = xtrue])
-
-# If NBDKit was found, find the plugin directory and executable
-AS_IF([test "x$NBDKIT_FOUND" = xtrue], [
-
-    # Find nbdkit plugins directory
-    AC_MSG_CHECKING([NBDKit plugins directory])
-    PKG_CHECK_VAR([NBDKIT_PLUGINDIR], [nbdkit], [plugindir])
-    AS_IF([test "x$NBDKIT_PLUGINDIR" = "x"],
-        [AC_MSG_FAILURE([Unable to identify the NBDKit plugin directory.])],
-        [AC_MSG_RESULT([$NBDKIT_PLUGINDIR])])
-
-    # Find nbdkit(1)
-    AC_PATH_PROGS([NBDKIT_EXECUTABLE], [nbdkit])
-    AS_IF([test "x$NBDKIT_EXECUTABLE" = x], [AC_MSG_ERROR([required executable nbdkit not found])])
-    AC_DEFINE_UNQUOTED([NBDKIT_EXECUTABLE], ["$NBDKIT_EXECUTABLE"], [path to nbdkit(1) executable])
-
-    # Find nbd-client(8)
-    AC_PATH_PROGS([NBD_CLIENT_EXECUTABLE], [nbd-client])
-    AS_IF([test "x$NBD_CLIENT_EXECUTABLE" = x], [AC_MSG_ERROR([required executable nbd-client not found])])
-    AC_DEFINE_UNQUOTED([NBD_CLIENT_EXECUTABLE], ["$NBD_CLIENT_EXECUTABLE"], [path to nbd-client(8) executable])
-
-    # Find modprobe(8) (optional)
-    AC_PATH_PROGS([MODPROBE_EXECUTABLE], [modprobe])
-    AC_DEFINE_UNQUOTED([MODPROBE_EXECUTABLE], ["$MODPROBE_EXECUTABLE"], [path to modprobe(8) executable])
-])
+AC_SUBST([NBDKIT_FOUND])
 
 # Define our directory for nbdkit(1) UNIX socket files, defaulting to /run/s3backer-nbd
 AC_ARG_VAR([S3B_NBD_DIR], [directory containing UNIX socket files used by nbd-client])
@@ -176,6 +180,8 @@ AC_ARG_ENABLE(Werror,
 AC_ARG_ENABLE(sanitize,
     AS_HELP_STRING([--enable-sanitize],[enable compilation with -fsanitize=address and -fsanitize=undefined (default NO)]),
     [test x"$enableval" = "xyes" && CFLAGS="${CFLAGS} -fsanitize=address -fsanitize=undefined"])
+AC_ARG_ENABLE(nbd,
+    AS_HELP_STRING([--enable-nbd],[include NBD support if nbdkit is found (default YES)]))
 
 # Generated files
 AC_CONFIG_FILES(Makefile)
diff --git a/dcache.c b/dcache.c
index 0d4dec1..cff486f 100644
--- a/dcache.c
+++ b/dcache.c
@@ -565,17 +565,54 @@ s3b_dcache_read_block(struct s3b_dcache *priv, u_int dslot, void *dest, u_int of
 int
 s3b_dcache_write_block(struct s3b_dcache *priv, u_int dslot, const void *src, u_int off, u_int len)
 {
+    const off_t prev_file_size = priv->file_size;
+    int r;
+
+    // Write the data info the block
+#if USE_FALLOCATE
+    r = s3b_dcache_write_block_falloc(priv, dslot, src, off, len);
+#else
+    r = s3b_dcache_write_block_simple(priv, dslot, src, off, len);
+#endif
+    if (r != 0)
+        return r;
+
+    // Keep the file size a proper multiple of one full data block (issue #222)
+    if (priv->file_size > prev_file_size) {
+#ifndef NDEBUG
+        const off_t dslot_start = DATA_OFFSET(priv, dslot);
+#endif
+        const off_t dslot_end = DATA_OFFSET(priv, dslot + 1);
+
+        assert(priv->file_size > dslot_start);
+        assert(priv->file_size <= dslot_end);
+        if (priv->file_size < dslot_end) {
+            const u_int padding_len = (u_int)(dslot_end - priv->file_size);
+            const u_int padding_off = priv->block_size - padding_len;
+
 #if USE_FALLOCATE
-    return s3b_dcache_write_block_falloc(priv, dslot, src, off, len);
+            r = s3b_dcache_write_block_falloc(priv, dslot, zero_block, padding_off, padding_len);
 #else
-    return s3b_dcache_write_block_simple(priv, dslot, src, off, len);
+            r = s3b_dcache_write_block_simple(priv, dslot, zero_block, padding_off, padding_len);
 #endif
+            if (r != 0)
+                return r;
+        }
+        assert(priv->file_size == dslot_end);
+    }
+
+    // Done
+    return 0;
 }
 
 #if USE_FALLOCATE
 
 /*
  * Write data into one dslot using FALLOC_FL_PUNCH_HOLE for zero filesystem blocks where able.
+ *
+ * The complexity here comes from the fact that the disk block size is (likely) smaller than the s3backer
+ * block size, so for some of the underlying disk blocks we may be able to punch a "zero hole" while for
+ * others we may not.
  */
 int
 s3b_dcache_write_block_falloc(struct s3b_dcache *priv, u_int dslot, const char *src, const u_int doff, u_int len)
@@ -607,7 +644,7 @@ s3b_dcache_write_block_falloc(struct s3b_dcache *priv, u_int dslot, const char *
     }
     assert(len == 0 || off == roundup_off);
 
-    // Write intermediate aligned bits, using FALLOC_FL_PUNCH_HOLE for zero blocks
+    // Write intermediate aligned bits, using FALLOC_FL_PUNCH_HOLE for zero disk blocks
     num_zero_blocks = 0;
     while (len >= priv->file_block_size) {
         u_int nonzero_len;
diff --git a/nbdkit.c b/nbdkit.c
index f56ea93..29b988d 100644
--- a/nbdkit.c
+++ b/nbdkit.c
@@ -85,6 +85,8 @@ static int s3b_nbd_plugin_flush(void *handle, uint32_t flags);
 static int s3b_nbd_plugin_can_multi_conn(void *handle);
 static int s3b_nbd_plugin_can_fua(void *handle);
 static int s3b_nbd_plugin_can_cache(void *handle);
+static int s3b_nbd_plugin_block_size(void *handle, uint32_t *minimum, uint32_t *preferred, uint32_t *maximum);
+
 static void s3b_nbd_plugin_unload(void);
 
 #define PLUGIN_HELP                                                                                                 \
@@ -115,6 +117,7 @@ static struct nbdkit_plugin plugin = {
     .can_fua=               s3b_nbd_plugin_can_fua,
     .can_cache=             s3b_nbd_plugin_can_cache,
     .is_rotational=         NULL,
+    .block_size=            s3b_nbd_plugin_block_size,
 
     // Startup lifecycle callbacks
     .load=                  s3b_nbd_plugin_load,
@@ -495,6 +498,17 @@ s3b_nbd_plugin_can_multi_conn(void *handle)
     return 1;
 }
 
+static int
+s3b_nbd_plugin_block_size(void *handle, uint32_t *minimum, uint32_t *preferred, uint32_t *maximum)
+{
+    *minimum = 1;
+    *preferred = config->block_size;
+    *maximum = 0xffffffff;
+    if (config->file_size < (off_t)*maximum)
+        *maximum = (uint32_t)config->file_size;
+    return 0;
+}
+
 ////////////// Internal functions
 
 static int
diff --git a/s3b_config.c b/s3b_config.c
index eea276c..14238ed 100644
--- a/s3b_config.c
+++ b/s3b_config.c
@@ -1971,7 +1971,9 @@ usage(void)
 
     fprintf(stderr, "Usage:\n");
     fprintf(stderr, "\ts3backer [options] bucket[/subdir] /mount/point\n");
+#if NBDKIT
     fprintf(stderr, "\ts3backer --nbd [options] bucket[/subdir] /dev/nbdX\n");
+#endif
     fprintf(stderr, "\ts3backer --test [options] directory /mount/point\n");
     fprintf(stderr, "\ts3backer --erase [options] bucket[/subdir]\n");
     fprintf(stderr, "\ts3backer --reset-mounted-flag [options] bucket[/subdir]\n");
@@ -2030,7 +2032,9 @@ usage(void)
     fprintf(stderr, "\t--%-27s %s\n", "md5CacheSize=NUM", "Max size of MD5 cache (zero = disabled)");
     fprintf(stderr, "\t--%-27s %s\n", "md5CacheTime=MILLIS", "Expire time for MD5 cache (zero = infinite)");
     fprintf(stderr, "\t--%-27s %s\n", "minWriteDelay=MILLIS", "Minimum time between same block writes");
+#if NBDKIT
     fprintf(stderr, "\t--%-27s %s\n", "nbd", "Run as an NBD server instead of a FUSE filesystem");
+#endif
     fprintf(stderr, "\t--%-27s %s\n", "no-vhost", "Disable virtual hosted style requests");
     fprintf(stderr, "\t--%-27s %s\n", "password=PASSWORD", "Encrypt using PASSWORD");
     fprintf(stderr, "\t--%-27s %s\n", "passwordFile=FILE", "Encrypt using password read from FILE");
